1. 
int[][] getIPRange()
{
    UInteger maxIP = math.pow(2, 32);
    int servRange = maxIP/5;
    int[][] rangs = int[5][2];
    for(int i=0; i<5; i++)
    {
        range[i][0] = servRange*i; 
        if(i != 4)
            range[i][1] = servRange*(i+1);
        else
            range[i][1] = maxIP;
    }
    return range;
}
        

1a.
class Server implements Comparable<Server> 
{
    Set<Integer> setIP = new Set<Integer>(); 
    public Server()
    {
    }
    public add(Integer IP)
    {
        setIP.add(IP);
    }
    public remove(Integer IP)
    {
        if(setIP.size() > 0)
            setIP.remove(IP);
    }

    //Minimum heap
    public int compareTo(Server s)
    {
        return this.setIP.size() - s.setIP.size();
    }
}

class LoadBalance
{
    PriorityQueue<Server> miniHeap = new PriorityQueue<Server>();

    public LoadBalance()
    {
        for(int i=0; i<5; i++)
            miniHeap.add(new Server());    
    }
    public void serve(Integer incomingIP)
    {
        Server s = miniHeap.peek();
        s.add(incomingIP);
    }
}

2. Euclidean Dividsion is fast, log(numerator)


